

DEFINE_ACTION_FUNCTION ~fixpack_for_tutu~ BEGIN

// Borrowed from fixpack

// globe of invulnerability lets quite a few spells through that it shouldn't
COPY_EXISTING ~jwglobe.spl~  ~override~ // Demogorgon Globe of Invulneribility
              ~spwi406.spl~  ~override~ // Minor Globe of Invulneribility
              ~spwi602.spl~  ~override~ // Globe of Invulneribility
              ~spwm126.spl~  ~override~ // Wild Mage Minor Globe, who knows what it's meant to do
  PATCH_IF (%SOURCE_SIZE% > 0x71) THEN BEGIN
    READ_LONG  0x64 "ho"
    READ_SHORT 0x68 "hc"
    READ_LONG  0x6a "eo"
    READ_SHORT 0x6e "gi"
    READ_SHORT 0x70 "gc"
    FOR ("i" = 0; "i" < ("hc" + 1); "i" += 1) BEGIN
      PATCH_IF ("i" = "hc") THEN BEGIN
        SET  "ec" = "gc"
        SET  "ei" = "gi"
      END ELSE BEGIN
        READ_SHORT ("ho" + (0x28 * "i") + 0x1e) "ec" ELSE 0
        READ_SHORT ("ho" + (0x28 * "i") + 0x20) "ei" ELSE 0
      END
      SET "added_fx" = 0
      SET "l1" = 0
      SET "l2" = 0
      SET "l3" = 0
      SET "entangle" = 0
      SET "silence" = 0
      SET "web" = 0
      SET "stinking_cloud" = 0
      SET "call_lightning" = 0
      SET "glyph_of_warding" = 0
      SET "holy_smite" = 0
      SET "unholy_blight" = 0
      SET "skull_trap" = 0
      FOR ("j" = 0; "j" < "ec"; "j" += 1) BEGIN
        READ_SHORT        (("eo" + (0x30 * ("j" + "ei"))) + 0x00) "opcode"
        READ_LONG         (("eo" + (0x30 * ("j" + "ei"))) + 0x04) "level"
        READ_ASCII        (("eo" + (0x30 * ("j" + "ei"))) + 0x14) "resref"
        PATCH_IF          (("opcode" = 0x66) AND
                           ("level" = 0x01)) THEN BEGIN
          READ_ASCII       ("eo" + (0x30 * ("j" + "ei"))) "template1" (0x30)
          SET "l1" = 1
        END ELSE PATCH_IF (("opcode" = 0x66) AND
                           ("level" = 0x02)) THEN BEGIN
          READ_ASCII       ("eo" + (0x30 * ("j" + "ei"))) "template2" (0x30)
          SET "l2" = 1
        END ELSE PATCH_IF (("opcode" = 0x66) AND
                           ("level" = 0x03)) THEN BEGIN
          READ_ASCII       ("eo" + (0x30 * ("j" + "ei"))) "template3" (0x30)
          SET "l3" = 1
        END ELSE PATCH_IF (("opcode" = 0xce) AND
                           (NOT "%resref%" STRING_COMPARE_CASE "sppr105")) THEN BEGIN
          SET "entangle" = 1
        END ELSE PATCH_IF (("opcode" = 0xce) AND
                           (NOT "%resref%" STRING_COMPARE_CASE "sppr211")) THEN BEGIN
          SET "silence" = 1
        END ELSE PATCH_IF (("opcode" = 0xce) AND
                           (NOT "%resref%" STRING_COMPARE_CASE "spwi213")) THEN BEGIN
          SET "web" = 1
        END ELSE PATCH_IF (("opcode" = 0xce) AND
                           (NOT "%resref%" STRING_COMPARE_CASE "spwi215")) THEN BEGIN
          SET "stinking_cloud" = 1
        END ELSE PATCH_IF (("opcode" = 0xce) AND
                           (NOT "%resref%" STRING_COMPARE_CASE "sppr302")) THEN BEGIN
          SET "call_lightning" = 1
        END ELSE PATCH_IF (("opcode" = 0xce) AND
                           (NOT "%resref%" STRING_COMPARE_CASE "sppr304")) THEN BEGIN
          SET "glyph_of_warding" = 1
        END ELSE PATCH_IF (("opcode" = 0xce) AND
                           (NOT "%resref%" STRING_COMPARE_CASE "sppr313")) THEN BEGIN
          SET "holy_smite" = 1
        END ELSE PATCH_IF (("opcode" = 0xce) AND
                           (NOT "%resref%" STRING_COMPARE_CASE "sppr314")) THEN BEGIN
          SET "unholy_blight" = 1
        END ELSE PATCH_IF (("opcode" = 0xce) AND
                           (NOT "%resref%" STRING_COMPARE_CASE "spwi313")) THEN BEGIN
          SET "skull_trap" = 1
        END
      END // FOR j, scanning effects
      // adding supplementary immunities if not present
      PATCH_IF ("l3" = 1) THEN BEGIN
        PATCH_IF ("skull_trap" = 0) THEN BEGIN
          INSERT_BYTES (("eo" + (0x30 * ("ec" + "ei"))) + 0x00) 0x30
          WRITE_ASCIIE (("eo" + (0x30 * ("ec" + "ei"))) + 0x00) "%template3%"
          WRITE_ASCIIT (("eo" + (0x30 * ("ec" + "ei"))) + 0x14) ~spwi313~
          SET "added_fx" += 1
        END
        PATCH_IF ("unholy_blight" = 0) THEN BEGIN
          INSERT_BYTES (("eo" + (0x30 * ("ec" + "ei"))) + 0x00) 0x30
          WRITE_ASCIIE (("eo" + (0x30 * ("ec" + "ei"))) + 0x00) "%template3%"
          WRITE_ASCIIT (("eo" + (0x30 * ("ec" + "ei"))) + 0x14) ~sppr314~
          SET "added_fx" += 1
        END
        PATCH_IF ("holy_smite" = 0) THEN BEGIN
          INSERT_BYTES (("eo" + (0x30 * ("ec" + "ei"))) + 0x00) 0x30
          WRITE_ASCIIE (("eo" + (0x30 * ("ec" + "ei"))) + 0x00) "%template3%"
          WRITE_ASCIIT (("eo" + (0x30 * ("ec" + "ei"))) + 0x14) ~sppr313~
          SET "added_fx" += 1
        END
        PATCH_IF ("glyph_of_warding" = 0) THEN BEGIN
          INSERT_BYTES (("eo" + (0x30 * ("ec" + "ei"))) + 0x00) 0x30
          WRITE_ASCIIE (("eo" + (0x30 * ("ec" + "ei"))) + 0x00) "%template3%"
          WRITE_ASCIIT (("eo" + (0x30 * ("ec" + "ei"))) + 0x14) ~sppr304~
          SET "added_fx" += 1
        END
        PATCH_IF ("call_lightning" = 0) THEN BEGIN
          INSERT_BYTES (("eo" + (0x30 * ("ec" + "ei"))) + 0x00) 0x30
          WRITE_ASCIIE (("eo" + (0x30 * ("ec" + "ei"))) + 0x00) "%template3%"
          WRITE_ASCIIT (("eo" + (0x30 * ("ec" + "ei"))) + 0x14) ~sppr302~
          SET "added_fx" += 1
        END
      END
      PATCH_IF ("l2" = 1) THEN BEGIN
        PATCH_IF ("stinking_cloud" = 0) THEN BEGIN
          INSERT_BYTES (("eo" + (0x30 * ("ec" + "ei"))) + 0x00) 0x30
          WRITE_ASCIIE (("eo" + (0x30 * ("ec" + "ei"))) + 0x00) "%template2%"
          WRITE_ASCIIT (("eo" + (0x30 * ("ec" + "ei"))) + 0x14) ~spwi215~
          SET "added_fx" += 1
        END
        PATCH_IF ("web" = 0) THEN BEGIN
          INSERT_BYTES (("eo" + (0x30 * ("ec" + "ei"))) + 0x00) 0x30
          WRITE_ASCIIE (("eo" + (0x30 * ("ec" + "ei"))) + 0x00) "%template2%"
          WRITE_ASCIIT (("eo" + (0x30 * ("ec" + "ei"))) + 0x14) ~spwi213~
          SET "added_fx" += 1
        END
        PATCH_IF ("silence" = 0) THEN BEGIN
          INSERT_BYTES (("eo" + (0x30 * ("ec" + "ei"))) + 0x00) 0x30
          WRITE_ASCIIE (("eo" + (0x30 * ("ec" + "ei"))) + 0x00) "%template2%"
          WRITE_ASCIIT (("eo" + (0x30 * ("ec" + "ei"))) + 0x14) ~sppr211~
          SET "added_fx" += 1
        END
      END
      PATCH_IF ("l1" = 1) THEN BEGIN
        PATCH_IF ("entangle" = 0) THEN BEGIN
          INSERT_BYTES (("eo" + (0x30 * ("ec" + "ei"))) + 0x00) 0x30
          WRITE_ASCIIE (("eo" + (0x30 * ("ec" + "ei"))) + 0x00) "%template1%"
          WRITE_ASCIIT (("eo" + (0x30 * ("ec" + "ei"))) + 0x14) ~sppr105~
          SET "added_fx" += 1
        END
      END
      PATCH_IF ("added_fx" > 0) THEN BEGIN
        FOR ("k" = 0; "k" < "added_fx"; "k" += 1) BEGIN
          WRITE_SHORT  (("eo" + (0x30 * ("ec" + "ei" + "k"))) + 0x00) 0xce
          WRITE_LONG   (("eo" + (0x30 * ("ec" + "ei" + "k"))) + 0x04) 0xffffffff
          WRITE_LONG   (("eo" + (0x30 * ("ec" + "ei" + "k"))) + 0x08) 0x00
        END
      END
      SET "ec" = ("ec" + "added_fx")
      PATCH_IF (("added_fx" > 0) AND ("i" = "hc")) THEN BEGIN
        WRITE_SHORT 0x70 "ec"
        FOR ("l" = 0; "l" < "hc"; "l" += 1) BEGIN
          READ_SHORT  ("ho" + (0x28 * "l") + 0x20) "ci"
          WRITE_SHORT ("ho" + (0x28 * "l") + 0x20) ("ci" + "added_fx")
        END
      END ELSE PATCH_IF (("added_fx" > 0) AND ("i" < "hc")) THEN BEGIN
        WRITE_SHORT ("ho" + (0x28 * "i") + 0x1e) "ec"
        FOR ("m" = ("i" + 1); "m" < "hc"; "m" += 1) BEGIN
          READ_SHORT  ("ho" + (0x28 * "m") + 0x20) "ci"
          WRITE_SHORT ("ho" + (0x28 * "m") + 0x20) ("ci" + "added_fx")
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES


// cone of cold missing level 10 ability header, wrong range at level 9, inconsistent save v non-save damage split
COPY_EXISTING ~spwi503.spl~ ~override~
  READ_LONG  0x64 "abil_off"
  READ_SHORT 0x68 "abil_num"
  READ_LONG  0x6a "fx_off"
  READ_SHORT 0x70 "fx_num"
  SET "lev10_exist" = 0
  SET "new_abil" = 0
  FOR (index = 0 ; index < abil_num ; index = index + 1) BEGIN
    READ_SHORT  ("%abil_off%" + 0x10 + (0x28 * "%index%")) "min_lev"
    READ_SHORT  ("%abil_off%" + 0x1e + (0x28 * "%index%")) "abil_fx_num"
    READ_SHORT  ("%abil_off%" + 0x20 + (0x28 * "%index%")) "abil_fx_idx"
    PATCH_IF ("%min_lev%" = 1) BEGIN
      SET "min_lev" = 9
    END
    FOR (index2 = 0 ; index2 < abil_fx_num ; index2 = index2 + 1) BEGIN
      READ_SHORT ("%fx_off%" +        (0x30 * ("%abil_fx_idx%" + "%index2%"))) "opcode"
      PATCH_IF ("%opcode%" = 12) BEGIN // damage
        READ_LONG  ("%fx_off%" + 0x24 + (0x30 * ("%abil_fx_idx%" + "%index2%"))) "save"
        PATCH_IF ("%save%" = 0) BEGIN
          WRITE_BYTE ("%fx_off%" + 0x04 + (0x30 * ("%abil_fx_idx%" + "%index2%"))) (("%min_lev%" + 1) / 2) // damage
          WRITE_BYTE ("%fx_off%" + 0x1c + (0x30 * ("%abil_fx_idx%" + "%index2%"))) ("%min_lev%" / 2) // damage
        END ELSE BEGIN
          WRITE_BYTE ("%fx_off%" + 0x04 + (0x30 * ("%abil_fx_idx%" + "%index2%"))) ("%min_lev%" / 2) // damage
          WRITE_BYTE ("%fx_off%" + 0x1c + (0x30 * ("%abil_fx_idx%" + "%index2%"))) (("%min_lev%" + 1) / 2) // damage
        END
      END
    END
    PATCH_IF ("%min_lev%" = 9) BEGIN // if first header
      WRITE_SHORT ("%abil_off%" + 0x0e + (0x28 * "%index%")) 12 // corrects range
      READ_ASCII  ("%abil_off%" + (0x28 * "%index%"))       "abil_clone" (0x28)
      READ_ASCII  ("%fx_off%" + (0x30 * ("%abil_fx_idx%"))) "fx_clone" (0x30 * "%abil_fx_num%")
      SET "new_fx" = "%abil_fx_num%"
      SET "start_fx" = ("%abil_fx_idx%" + "%abil_fx_num%")
      SET "insert" = ("%abil_off%" + (0x28 * ("%index%" + 1)))
    END ELSE
    PATCH_IF ("%min_lev%" = 10) BEGIN
      SET "lev10_exist" = 1
    END
  END
  PATCH_IF ("%lev10_exist%" = 0) BEGIN
    SET "level" = 10
    INSERT_BYTES (("%fx_off%" + (0x28 * "%new_abil%")) + (0x30 * ("%start_fx%" * ("%new_abil%" + 1)))) (0x30 * "%new_fx%")
      WRITE_EVALUATED_ASCII (("%fx_off%" + (0x28 * "%new_abil%")) + (0x30 * ("%start_fx%" * ("%new_abil%" + 1)))) "%fx_clone%"
    FOR (index2 = 0 ; index2 < new_fx ; index2 = index2 + 1) BEGIN
      READ_SHORT (("%fx_off%" + (0x28 * "%new_abil%")) + (0x30 * ("%index2%" + "%start_fx%" + ("%new_abil%" * "%new_fx%")))) "opcode"
      PATCH_IF ("%opcode%" = 12) BEGIN // damage
        READ_LONG (("%fx_off%" + (0x28 * "%new_abil%")) + 0x24 + (0x30 * ("%index2%" + "%start_fx%" + ("%new_abil%" * "%new_fx%")))) "save"
        PATCH_IF ("%save%" = 0) BEGIN
          WRITE_BYTE (("%fx_off%" + (0x28 * "%new_abil%")) + 0x04 + (0x30 * ("%index2%" + "%start_fx%" + ("%new_abil%" * "%new_fx%")))) (("%level%" + 1) / 2) // damage
          WRITE_BYTE (("%fx_off%" + (0x28 * "%new_abil%")) + 0x1c + (0x30 * ("%index2%" + "%start_fx%" + ("%new_abil%" * "%new_fx%")))) ("%level%" / 2) // damage
        END ELSE BEGIN
          WRITE_BYTE (("%fx_off%" + (0x28 * "%new_abil%")) + 0x04 + (0x30 * ("%index2%" + "%start_fx%" + ("%new_abil%" * "%new_fx%")))) ("%level%" / 2) // damage
          WRITE_BYTE (("%fx_off%" + (0x28 * "%new_abil%")) + 0x1c + (0x30 * ("%index2%" + "%start_fx%" + ("%new_abil%" * "%new_fx%")))) (("%level%" + 1) / 2) // damage
        END
      END
    END
    INSERT_BYTES ("%insert%" + (0x28 * "%new_abil%")) 0x28
      WRITE_EVALUATED_ASCII ("%insert%" + (0x28 * "%new_abil%")) "%abil_clone%"
      WRITE_SHORT (("%insert%" + (0x28 * "%new_abil%")) + 0x10) "%level%"
      WRITE_SHORT (("%insert%" + (0x28 * "%new_abil%")) + 0x1e) "%new_fx%"
    SET "new_abil" = "%new_abil%" + 1
  END
  PATCH_IF ("%new_abil%" > 0) BEGIN
    SET "abil_num" = ("%abil_num%" + "%new_abil%")
    WRITE_SHORT 0x68 "abil_num"
    WRITE_LONG  0x6a ("%fx_off%" + (0x28 * "%new_abil%"))
    // re-index everything
    FOR (index = 0 ; index < abil_num ; index = index + 1) BEGIN
      WRITE_SHORT ("%abil_off%" + 0x20 + (0x28 * "%index%")) "%fx_num%"
      READ_SHORT  ("%abil_off%" + 0x1e + (0x28 * "%index%")) "abil_fx_num"
      SET "fx_num" = "%fx_num%" + "%abil_fx_num%"
    END
  END
  BUT_ONLY_IF_IT_CHANGES



END
