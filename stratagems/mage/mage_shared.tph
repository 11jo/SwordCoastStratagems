LAF include STR_VAR locbase=mage files="defensive_spells_mage.tph defensive_spells_fm.tph defensive_spells_bard.tph spell_swaps.tph" END
LAF include STR_VAR locbase=caster_shared file=caster_shared.tph END

//////////////////////////////////////////////////////////////////////////////////////////////////////
/////          Enforce being a mage
///////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION enforce_mage
     STR_VAR filename=""
             arguments=""
BEGIN
   INNER_ACTION BEGIN
      OUTER_SPRINT type mage
      LAUNCH_ACTION_MACRO read_in_spells_per_level
      LAUNCH_ACTION_MACRO read_in_spell_choices
      LAUNCH_ACTION_MACRO read_in_individual_overrides
   END
   LPF initialise_enforce_caster STR_VAR filename type arguments RET class race alignment hla game spells_are_bg1 modify_level kitdata prebuff script_required=script END
   LPF find_mage_type STR_VAR class race alignment kitdata filename RET scriptbase kit castertype END
   LPF get_caster_level INT_VAR modify_level STR_VAR type=mage castertype filename RET level END
   LPF allocate_mage_spells INT_VAR level spells_are_bg1 hla refinements STR_VAR kit race filename END
   LPF determine_mage_script INT_VAR game level STR_VAR scriptbase castertype race RET script END
   LPF build_mage_script INT_VAR prebuff STR_VAR script END
   LPF strip_scs_scripts END
   PATCH_IF script_required BEGIN                        
      LPF CRE_insert_script_low STR_VAR arguments= ~%script%~ END
   END
END
//////////////////////////////////////////////////////////////////////////////////////////////////////
/////          Work out a mage's scriptbase, kit, and caster type
///////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION find_mage_type
   STR_VAR race=""
           class=""
           alignment=""
           filename=""
           kitdata=""
   RET castertype
       kit
       scriptbase
BEGIN

   SPRINT scriptbase ~~

   // set caster type - almost always mage
   PATCH_IF ~%class%~ STRING_EQUAL_CASE BARD BEGIN
      SPRINT castertype bard
   END ELSE BEGIN
      SPRINT castertype mage
   END
   // For rakshasas, vampires, demons, etc we enforce fighter-mage and set base directly
   PATCH_MATCH ~%race%~ WITH
   RAKSHASA BEGIN
       SPRINT scriptbase rak
       SPRINT kit fighter_mage
       PATCH_IF !enhanced_edition BEGIN
          LPF CRE_class STR_VAR arguments=FIGHTER_MAGE END
       END
   END
   VAMPIRE BEGIN
       SPRINT scriptbase vam
       SPRINT kit fighter_mage
       PATCH_IF !enhanced_edition BEGIN
           LPF CRE_class STR_VAR arguments=FIGHTER_MAGE END
       END
   END
   DEMONIC BEGIN
       SPRINT scriptbase fmi
       SPRINT kit fighter_mage
       PATCH_IF !enhanced_edition BEGIN
           LPF CRE_class STR_VAR arguments=FIGHTER_MAGE END
       END
   END
   OGRE BEGIN
       SPRINT scriptbase fmg
       SPRINT kit fighter_mage
       PATCH_IF !enhanced_edition BEGIN
           LPF CRE_class STR_VAR arguments=FIGHTER_MAGE END
       END
   END
   DEFAULT
   END
   // set base if not already set
   PATCH_IF ~%scriptbase%~ STRING_EQUAL_CASE ~~ BEGIN
      PATCH_MATCH ~%class%~ WITH
         BARD BEGIN
            SPRINT scriptbase brd
            SPRINT kit bard
         END
         FIGHTER_MAGE BEGIN
            SPRINT scriptbase fmg
            SPRINT kit fighter_mage
         END
         MAGE_THIEF FIGHTER_MAGE_THIEF BEGIN
            SPRINT scriptbase tmg
            SPRINT kit fighter_mage
         END
         DEFAULT
            LPF CRE_class STR_VAR arguments=MAGE END 
            TO_UPPER filename
            PATCH_MATCH ~%kitdata%~ WITH
               INVOKER MAGESCHOOL_INVOKER BEGIN
                  SPRINT scriptbase inv
                  SPRINT kit invoker
               END
               NECROMANCER MAGESCHOOL_NECROMANCER BEGIN
                  SPRINT scriptbase nec
                  SPRINT kit necromancer
               END
               ENCHANTER MAGESCHOOL_ENCHANTER  BEGIN
                  SPRINT scriptbase enc
                  SPRINT kit enchanter
               END
               CONJURER MAGESCHOOL_CONJURER BEGIN
                  SPRINT scriptbase con
                  SPRINT kit conjurer
               END
               DEFAULT
                  LPF assign_mage_kit STR_VAR race alignment RET kit scriptbase END
               END
         END
   END


END

//////////////////////////////////////////////////////////////////////////////////////////////////////
/////          Determine the right script for a mage
///////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION determine_mage_script
   INT_VAR game=2
           level=0
   STR_VAR race=""
           castertype=""
           scriptbase=""
   RET script
BEGIN

   PATCH_IF ~%race%~ STRING_EQUAL_CASE lich BEGIN
       SPRINT spell_level L
   END ELSE BEGIN
       SET spell_level=$caster_level_to_spell_level(~%castertype%~ ~%level%~)
   END
   TO_LOWER scriptbase
   PATCH_MATCH scriptbase WITH
      brd rak vam fmi BEGIN // no BG1 scripts
         SET game=2
      END
      DEFAULT
      END
   SPRINT script ~dw#%game%%scriptbase%%spell_level%~
END


//////////////////////////////////////////////////////////////////////////////////////////////////////
/////          Choose (and set) a random kit for a mage
///////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION assign_mage_kit
   STR_VAR race=""
           alignment=""
   RET kit scriptbase
BEGIN
   PATCH_IF ~%race%~ STRING_EQUAL_CASE lich BEGIN
      SET choice=RANDOM(1 3)
   END ELSE BEGIN
      PATCH_MATCH ~%alignment%~ WITH
         LAWFUL_EVIL CHAOTIC_EVIL NEUTRAL_EVIL BEGIN
             SET choice=RANDOM(1 4)
         END
         DEFAULT
             SET choice=RANDOM(2 4)
         END
   END
   PATCH_MATCH choice WITH
   1 BEGIN
      SPRINT kit necromancer
      SPRINT scriptbase nec
   END
   2 BEGIN
      SPRINT kit conjurer
      SPRINT scriptbase con
   END
   3 BEGIN
      SPRINT kit invoker
      SPRINT scriptbase inv
   END
   4 BEGIN
      SPRINT kit enchanter
      SPRINT scriptbase enc
   END
   DEFAULT END
   SPRINT arguments ~mageschool_%kit%~
   TO_UPPER arguments
   LPF CRE_kit STR_VAR arguments END
END


//////////////////////////////////////////////////////////////////////////////////////////////////////
/////          Build a mage script (if needed)
///////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION build_mage_script
      INT_VAR prebuff=1
              force_build=0
      STR_VAR script=""
BEGIN
      ACTION_IF FILE_EXISTS_IN_GAME ~%script%.bcs~ && force_build=0 BEGIN
         OUTER_SET needed=0
      END ELSE BEGIN
         OUTER_SET needed=1
      END
      LAUNCH_ACTION_MACRO read_in_instant_prebuff_spells
      ACTION_IF needed=1 BEGIN
         LAF parse_mage_script_name STR_VAR script RET variables base directory END
         LAF get_mage_prebuff_variables INT_VAR prebuff STR_VAR game= ~%directory%~ RET prebuff_variables=variables END
         OUTER_SPRINT variables ~%variables%&%prebuff_variables%~
         OUTER_SPRINT scriptname ~%script%~
         ACTION_IF debug_variable=2 BEGIN
            LAF warning STR_VAR warning= ~Trying to compile mage base script %base% with variables %variables%~ END
         END
         LAF ssl_to_bcs STR_VAR variables script=~%base%~ location= ~ssl/%directory%/main~ locbase=mage rename_to=~%scriptname%~ END
      END
END

DEFINE_PATCH_FUNCTION build_mage_script
     INT_VAR prebuff=1
             force_build=0
     STR_VAR script=""
BEGIN
   INNER_ACTION BEGIN
      LAF build_mage_script INT_VAR prebuff force_build STR_VAR script END
   END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////
/////          Get mage prebuff variables
///////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION get_mage_prebuff_variables
  INT_VAR prebuff=1
  STR_VAR game=bg2
  RET variables
BEGIN
   ACTION_MATCH prebuff WITH
      1 BEGIN
               OUTER_SPRINT ~variables~ ~optiontwosub1=!Global(\"DMWWDisableBuffing\",\"GLOBAL\",1)~
               OUTER_SPRINT ~variables~ ~%variables%&optiontwosub2=~
               OUTER_SPRINT ~variables~ ~%variables%&IsOptionOne=True~
      END
      2 BEGIN
               OUTER_SPRINT ~variables~ ~optiontwosub1=!Global(\"DMWWDisableBuffing\",\"GLOBAL\",1)!GlobalTimerExpired(\"optiontwotimer\",\"LOCALS\")~
               OUTER_SPRINT ~variables~ ~%variables%&optiontwosub2=GlobalTimerExpired(\"optiontwotimer\",\"LOCALS\")~
               OUTER_SPRINT ~variables~ ~%variables%&IsOptionTwo=True~

      END
      3 BEGIN
               OUTER_SPRINT ~variables~ ~optiontwosub1=~
               OUTER_SPRINT ~variables~ ~%variables%&optiontwosub2=~
               OUTER_SPRINT ~variables~ ~%variables%&IsOptionThree=True~
      END
      4 BEGIN
               ACTION_IF ~%game%~ STRING_EQUAL_CASE bg1 BEGIN
                 OUTER_SPRINT ~variables~ ~optiontwosub1=!Global(\"DMWWDisableBuffing\",\"GLOBAL\",1)~
                 OUTER_SPRINT ~variables~ ~%variables%&optiontwosub2=~
                 OUTER_SPRINT ~variables~ ~%variables%&IsOptionOne=True~
               END ELSE BEGIN
                 OUTER_SPRINT ~variables~ ~optiontwosub1=!Global(\"DMWWDisableBuffing\",\"GLOBAL\",1)!GlobalTimerExpired(\"optiontwotimer\",\"LOCALS\")~
                 OUTER_SPRINT ~variables~ ~%variables%&optiontwosub2=GlobalTimerExpired(\"optiontwotimer\",\"LOCALS\")~
                 OUTER_SPRINT ~variables~ ~%variables%&IsOptionTwo=True~
               END
      END
      5 BEGIN
               OUTER_SPRINT ~variables~ ~optiontwosub1=!Global(\"Mage_Prep_Override\",\"GLOBAL\",1)OR(2)DifficultyGT(NORMAL)Global(\"Mage_Prep_Override\",\"GLOBAL\",2)~
               OUTER_SPRINT ~variables~ ~%variables%&optiontwosub2=~
               OUTER_SPRINT ~variables~ ~%variables%&IsOptionTwo=True~
      END
   DEFAULT
      LAF warning STR_VAR warning=~%prebuff% is not a recognised prebuffing option~ END
   END
   OUTER_SPRINT variables ~%variables%&UsingClones=True~
END


//////////////////////////////////////////////////////////////////////////////////////////////////////
/////          Parse a script to work out which variables it requires
///////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION parse_mage_script_name
      STR_VAR script=""
      RET variables directory  base
BEGIN
   OUTER_INNER_PATCH ~~ BEGIN
      LPF parse_mage_script_name STR_VAR script RET variables directory  base END
   END
END



DEFINE_PATCH_FUNCTION parse_mage_script_name
      STR_VAR script=""
      RET variables directory  base
BEGIN
      TO_UPPER script
      SPRINT variables ~~
      SET warning=0
      INNER_PATCH ~%script%~ BEGIN
         READ_ASCII 0x3 char3 (1)
         PATCH_MATCH ~%char3%~ WITH
            1 BEGIN
               SPRINT directory bg1
            END
            2 BEGIN
               SPRINT directory bg2
            END
            DEFAULT
               SET warning=1
            END
         READ_ASCII 0x4 kit (3)
         PATCH_MATCH ~%kit%~ WITH
            ENC BEGIN
                SPRINT variables ~IsEnchanter=True&IsEnchanterStreamline=True&MageTypeContingencyFile=chaincont_enchanter~
                SPRINT base dw#mage
            END
            INV BEGIN
                SPRINT variables ~IsEvoker=True&IsEvokerStreamline=True&MageTypeContingencyFile=chaincont_evoker~
                SPRINT base dw#mage
            END
            NEC BEGIN
                SPRINT variables ~IsNecromancer=True&IsNecromancerStreamline=True&MageTypeContingencyFile=chaincont_necromancer~
                SPRINT base dw#mage
            END
            CON BEGIN
                SPRINT variables ~IsConjurer=True&IsConjurerStreamline=True&MageTypeContingencyFile=chaincont_core~
                SPRINT base dw#mage
            END
            TMG BEGIN
                SPRINT variables ~MageTypeContingencyFile=chaincont_core&IsThief=True~
                SPRINT base dw#thmag
            END
            VAM BEGIN
                SPRINT variables ~MageTypeContingencyFile=fm_chaincont_core~
                SPRINT base dw#mvamp
            END
            RAK BEGIN
                SPRINT variables ~MageTypeContingencyFile=fm_chaincont_core~
                SPRINT base dw#raksh
            END
            FMG BEGIN
                SPRINT variables ~MageTypeContingencyFile=fm_chaincont_core&IsHighLevel=True&IsKensai=True&IsBerserker=True&IsBarbarian=True&IsFM=True~
                SPRINT base dw#fgmag
            END
            FMI BEGIN
                SPRINT variables ~MageTypeContingencyFile=fm_chaincont_core&IsHighLevel=True&IsKensai=True&IsBerserker=True&IsBarbarian=True&IsFM=True~
                SPRINT base dw#fminv
            END
            BRD BEGIN
               SPRINT variables ~MageTypeContingencyFile=fm_chaincont_core~ // should actually be moot: bards don't get L9 spells
               SPRINT base dw#bard
            END
            DEFAULT
               SET warning=1
            END
         READ_ASCII 0x7 level_char (1)
         PATCH_MATCH ~%level_char%~ WITH
            1 2 3 4 5 6 7 8 9 BEGIN
               SET level=level_char
            END
            L BEGIN
               SET level=9
               SPRINT variables ~%variables%&IsLich=True~
                SPRINT base dw#lich
            END
            DEFAULT
               SET warning=1
            END
      END
      FOR (i=1;i<=level;i+=1) BEGIN
         SPRINT variables ~%variables%&HasL%i%=True~
      END
      PATCH_IF warning=1 BEGIN
         LPF warning STR_VAR warning=~Script %script% was not correctly identified~ END
      END
END


//////////////////////////////////////////////////////////////////////////////////////////////////////
/////          Give out spells
///////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION allocate_mage_spells
      INT_VAR level=0
              spells_are_bg1="-1"
              hla=0
              refinements=0
      STR_VAR kit=""
              race=""
              filename=""
      RET     spells
BEGIN
      //// initialise
      PATCH_IF ~spells_are_bg1~= ~-1~ BEGIN
         INNER_ACTION BEGIN
            ACTION_IF FILE_EXISTS ~override/dw#standardise_nobg2.mrk~ BEGIN
               OUTER_SET spells_are_bg1=1
            END ELSE BEGIN
               OUTER_SET spells_are_bg1=0
            END
         END
      END
      PATCH_IF hla=0 BEGIN
         LPF check_hla_status STR_VAR filename RET hla=value END
      END
      PATCH_IF !VARIABLE_IS_SET hla_innate BEGIN
         INNER_ACTION BEGIN
            LAF check_if_hlas_are_innate RET hla_innate END
         END
      END
      INNER_ACTION BEGIN
         OUTER_SPRINT spelltype mage
         LAUNCH_ACTION_MACRO read_in_spell_choices
      END
      TO_LOWER kit
      TO_LOWER race
      /// wipe existing spells

      LPF CRE_remove_spells STR_VAR arguments=wizard END

      // Innate HLAs
      PATCH_IF (hla=1 && hla_innate>0  && ~%kit%~ STRING_COMPARE_CASE ~bard~) BEGIN
         // determine # of innates
        PATCH_IF ~refinements~=1 BEGIN
           SET ~num_hla_innate~=~level~-18 // Arcane Knowledge
        END ELSE BEGIN
           SET ~num_hla_innate~=~level~-17
        END
        PATCH_IF num_hla_innate>0 BEGIN
          SPRINT innate_spells ~~
          PATCH_IF hla_innate=1 BEGIN // no repeats
           SPRINT list $spell_choices_mage(~%kit%~ IO)
           WHILE (~%list%~ STRING_COMPARE ~~ & num_hla_innate>0) BEGIN
              LPF return_first_entry STR_VAR list RET entry=entry list=list END
              PUSH innate_spells ~%entry%~
              SET num_hla_innate = num_hla_innate - 1
           END
          END ELSE BEGIN
             FOR (i=0;i<num_hla_innate;i+=1) BEGIN
                PUSH innate_spells PLACEHOLDER
             END
             SPRINT swap_in $spell_choices_mage(~%kit%~ IR)
             LPF substitute_spells STR_VAR spells= ~%innate_spells%~ swap_out=PLACEHOLDER swap_in RET spells_here=spells END
          END
          WHILE ~%innate_spells%~ STRING_COMPARE ~~ BEGIN
             LPF return_first_entry STR_VAR list= ~%innate_spells%~ RET arguments=entry innate_spells=list END
             LPF CRE_add_spells STR_VAR arguments= ~WIZARD_%arguments%~ END
          END
        END

      END

      // basic defensive choices

      PATCH_MATCH ~%kit%~ WITH
      bard BEGIN
         SPRINT class bard
         LPF defensive_spells_bard INT_VAR level hla hla_innate refinements STR_VAR kit RET spells=spells END
      END
      fighter_mage BEGIN
         SPRINT class fighter_mage
         LPF defensive_spells_fm INT_VAR level hla hla_innate refinements STR_VAR kit RET spells=spells END
      END
      DEFAULT
         SPRINT class mage
         LPF defensive_spells_mage INT_VAR level hla hla_innate refinements STR_VAR kit RET spells=spells END
      END

      // fine-tune basic defenses

      LPF individual_choices STR_VAR spells filename component=mage RET spells=spells END
      LPF mage_spell_swap_race_preparatory STR_VAR spells race RET spells=spells END
      PATCH_IF spells_are_bg1=1 BEGIN
         LPF mage_spell_swap_bg1_preparatory STR_VAR spells RET spells=spells END
      END
      
      // work out remaining spell slots and allocate spells to them
      LPF determine_number_of_spells INT_VAR level STR_VAR class RET av_0 av_1 av_2 av_3 av_4 av_5 av_6 av_7 av_8 END
      LPF count_spell_levels STR_VAR spells prefix=~WIZARD_~ RET ct_0 ct_1 ct_2 ct_3 ct_4 ct_5 ct_6 ct_7 ct_8 END
      FOR (i=0;i<9;i+=1) BEGIN
        SET $av(~%i%~)=$av(~%i%~) - $ct(~%i%~)
      END
      PATCH_IF (hla=1 && hla_innate <2) BEGIN // allow (a little crudely) for extra-spells HLAs
         PATCH_IF level>22 BEGIN
             SET av_5=av_5+1
         END
         PATCH_IF level>23 BEGIN
             SET av_6=av_6+1
         END
         PATCH_IF level>24 BEGIN
             SET av_7=av_7+1
         END
      END
      FOR(i=0;i<9;i+=1) BEGIN
         SET spell_level=i+1
         PATCH_IF (spell_level=9 && hla=1 && hla_innate=0) BEGIN
            SPRINT ~spell_level~ H
         END
         SET spell_num=$av(~%i%~)
         PATCH_IF debug_variable=2 BEGIN
           PATCH_PRINT ~Spells at level %i%=%spell_num%~
         END
         PATCH_IF spell_num < 0 BEGIN
            LPF patch_log_this STR_VAR file=illegal_wizard_spells.txt input= ~%SOURCE_RES% at level %spell_level%~ END
         END
         SPRINT ~spells_here~ ~~
         PATCH_IF spell_num>0 BEGIN
            FOR (j=0;j<spell_num;j+=1) BEGIN
               PUSH spells_here PLACEHOLDER
            END
            SPRINT swap_in $spell_choices_mage(~%kit%~ ~%spell_level%~)
            LPF substitute_spells STR_VAR spells= ~%spells_here%~ swap_out=PLACEHOLDER swap_in RET spells_here=spells END
            PUSH spells ~%spells_here%~
         END
      END
      

      // fine-tune remaining spells

      LPF mage_spell_swap_race STR_VAR kit race spells RET spells=spells END
      LPF mage_spell_swap_level INT_VAR level STR_VAR kit spells RET spells=spells END
      PATCH_IF spells_are_bg1=1 BEGIN
         LPF mage_spell_swap_bg1 STR_VAR spells RET spells=spells END
      END

      // install the spells

      SPRINT ~spells_expanded~ ~~
      WHILE ~%spells%~ STRING_COMPARE_CASE ~~ BEGIN
         LPF return_first_entry STR_VAR list= ~%spells%~ RET spells=list entry=entry END
         PUSH spells_expanded ~WIZARD_%entry%~
      END

      PATCH_IF debug_variable=2 BEGIN
         LPF warning STR_VAR warning= ~Trying to add spells %spells_expanded%~  END
      END
      LPF CRE_add_spells STR_VAR arguments= ~%spells_expanded%~ END

END

