//INCLUDE "%scsroot%/lib/ai_wrap.tph"

DEFINE_ACTION_FUNCTION test BEGIN

ACTION_IF GAME_IS iwdee BEGIN

   /*
   OUTER_SPRINT temples ""
   COPY_EXISTING_REGEXP ".*\.sto" override
      PATCH_IF INDEX_BUFFER ("%CLERIC_RESURRECTION%") >= 0 BEGIN
         SPRINT temples "%temples% %SOURCE_RES%"
      END
   BUT_ONLY
   MAKE_PATCH
      cure=>"%CLERIC_RESTORATION%"
      cure_price=>750
      at_end=>1
   END
   LAF edit_store STR_VAR store="%temples%" editstring="add_cure=>patch_data" END
   */

   /*
   WITH_TRA "%scsroot%/lang/english/difficulty.tra" BEGIN
      LAF include STR_VAR file="difficulty_controls.tpa" locbase=lib END
      LAF difficulty_ui END
   END
   */

   OUTER_SPRINT component_loc lib
   LAF include STR_VAR file=difficulty_controls.tpa locbase=lib END
   LOAD_TRA "stratagems/lang/english/difficulty.tra"
   LAF difficulty_ui END


END ELSE BEGIN
  
   LAF run STR_VAR file=testing_suite locbase=lib END



END




END

DEFINE_PATCH_FUNCTION cauldron_condition
   INT_VAR red=0
           green=0
           blue=0
   RET value
BEGIN
   PATCH_IF (red>50 && green<200) BEGIN
      SET value=1
   END ELSE BEGIN
      SET value=0
   END
END

DEFINE_PATCH_FUNCTION cauldron_action
   INT_VAR red=0
           green=0
           blue=0
   RET red green blue
BEGIN
  SET red_old=red
//  SET green=red_old/2
  SET blue=green/4
  SET red=red/6
  SET green=(2*green)/3
END

DEFINE_ACTION_FUNCTION abazigal_new_ar6012 BEGIN
   // copy over old AR6004 for new version, removing all actors in the process

   LAF clone_area STR_VAR area="ar6004=>ar6012" editstring="delete_actor=>1 area_script=>ar6012 wed=>ar6012" END

   // make the new WED file

   COPY_EXISTING ar6004.wed "override/ar6012.wed"
      WRITE_ASCII 0x24 ar6012 (8)

   // invert! adding recolored tis/pvrz and height maps in the process

   LAF flip_area STR_VAR area=ar6012 file_loc="%scsroot%/%component_loc%/ar6012" END



END

DEFINE_PATCH_FUNCTION add_animation
   INT_VAR xloc=0
           yloc=0
           number=0
BEGIN
     PATCH_IF (number / 2) * 2 = number BEGIN
        WRITE_ASCIIE anim_off + number*0x4c "%anim_data%"
     END ELSE BEGIN
        WRITE_ASCIIE anim_off + number*0x4c "%anim_data_2%"
     END
     WRITE_SHORT anim_off+0x20 + 0x4c*number xloc
     WRITE_SHORT anim_off+0x22 + 0x4c*number yloc
END

DEFINE_PATCH_FUNCTION add_ambient
   INT_VAR xloc=0
           yloc=0
           number=0
BEGIN
   WRITE_ASCIIE amb_off + number * 2 * 0xd4 "%amb_data%"
   WRITE_ASCIIE amb_off + (number * 2 +1) * 0xd4 "%amb_data_2%"
   WRITE_SHORT amb_off + number * 2 * 0xd4 + 0x20 xloc
   WRITE_SHORT amb_off + number * 2 * 0xd4 + 0x22 yloc
   WRITE_SHORT amb_off + (number * 2 + 1 ) * 0xd4 + 0x20 xloc
   WRITE_SHORT amb_off + (number * 2 + 1 ) * 0xd4 + 0x22 yloc
END
