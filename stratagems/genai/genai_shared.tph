LAF include STR_VAR files="kits.tph hla.tph" locbase=genai END

DEFINE_ACTION_FUNCTION build_genai_script
       INT_VAR force_build=0
       STR_VAR script=""
BEGIN
       // scripts are named as follows:
     //
     // dw[1/2/3][m/r][c/p/s/m][0/1/2/3/4/5/6][ge/ke/ba/be/as/ar/th/ws/mn]
     //
     // where: m/r is melee/range
     //        1/2/3 is BG1/BG2/BG2 with HLAs
     //        c/p/s/m is crushing/piercing/slashing/missile damage
     //        0/1/2/3/4/5/6 is the plus on your weapon type
     //        mo is unintelligent, ge is generic, ke is kensai, ba is barbarian, be is berserker, as is assassin, ar is archer, th is thief (or stalker), ws is wizard-slayer, mn is monk
     //        mw and gw are the unintelligent and generic blocks with a "wander-around" block on the end
     //
     //        To help with backwards compatibility, dw#me2ge is renamed dw#melee, and dw#rn2ge is renamed dw#range
     //
   OUTER_INNER_PATCH ~~ BEGIN
         TO_LOWER script
   END
   OUTER_SPRINT scriptname ~%script%~
   ACTION_IF (!FILE_EXISTS_IN_GAME ~%scriptname%.bcs~ || force_build=1) BEGIN
      OUTER_SET warning=0
      OUTER_INNER_PATCH ~~ BEGIN
         TO_LOWER script
      END
      OUTER_INNER_PATCH ~%script%~ BEGIN
              READ_ASCII 0x2 power (1)
              PATCH_MATCH ~%power%~ WITH
              1 BEGIN
                 SPRINT variables ~IsBG1=True&IsHighLevel=False&ArrowSafe=ArrowSafeBG1~
              END
              2 BEGIN
                 SPRINT variables ~IsBG1=False&IsHighLevel=False~
              END
              3 BEGIN
                 SPRINT variables ~IsBG1=False&IsHighLevel=True~
              END
              DEFAULT
                 SET warning=1
              END
              READ_ASCII 0x3 type (1)
              PATCH_MATCH ~%type%~ WITH
              m BEGIN
                 SPRINT base dw#melee
              END
              r BEGIN
                 SPRINT base dw#range
                 SPRINT ~variables~ ~%variables%&IsRanged=True~
              END
              DEFAULT
                 SET warning=1
              END
              PATCH_IF power=1 BEGIN
                SPRINT variables ~%variables%&MyWeaponStrength=Null&MyWeaponDamageType=Null~
              END ELSE BEGIN
                READ_ASCII 0x4 dmg (1)
                PATCH_MATCH ~%dmg%~ WITH
                c BEGIN
                  SPRINT variables ~%variables%&MyWeaponDamageType=Crushing~
                END
                s BEGIN
                  SPRINT variables ~%variables%&MyWeaponDamageType=Slashing~
                END
                p BEGIN
                  SPRINT variables ~%variables%&MyWeaponDamageType=Piercing~
                END
                m BEGIN
                  SPRINT variables ~%variables%&MyWeaponDamageType=MultipleDamageType~
                END
                DEFAULT
                   SET warning=1
                END
                READ_ASCII 0x5 power (1)
                SET power=power>6?6:power
                SPRINT variables ~%variables%&MyWeaponStrength=%power%~
              END
              READ_ASCII 0x6 class (2)
              // set class variables
              PATCH_MATCH ~%class%~ WITH
              mo BEGIN
                 SPRINT variables ~%variables%&IsMoron=True~
              END
              ge BEGIN END
              ke BEGIN
                 SPRINT variables ~%variables%&IsKensai=True~
              END
              ba BEGIN
                 SPRINT variables ~%variables%&IsBarbarian=True~
              END
              be BEGIN
                 SPRINT variables ~%variables%&IsBerserker=True~
              END
              as BEGIN
                 SPRINT variables ~%variables%&IsAssassin=True~
              END
              ar BEGIN
                 SPRINT variables ~%variables%&IsArcher=True~
              END
              th BEGIN
                 SPRINT variables ~%variables%&IsThief=True~
              END
              ws BEGIN
                 SPRINT variables ~%variables%&IsWizardSlayer=True~
              END
              mn BEGIN
                 SPRINT variables ~%variables%&IsMonk=True~
              END
              mw BEGIN
                SPRINT variables ~%variables%&IsMoron=True&IsWandering=True~
              END
              gw BEGIN
                SPRINT variables ~%variables%&IsWandering=True~
              END
              DEFAULT
                SET warning=1
              END
      END
      ACTION_IF warning=0 BEGIN
         LAF ssl_to_bcs STR_VAR script=EVALUATE_BUFFER ~%base%~ variables location=~genai/ssl~ rename_to=EVALUATE_BUFFER ~%scriptname%~ END
      END ELSE BEGIN
         LAF action_display_warning STR_VAR warning=EVALUATE_BUFFER ~Cannot parse genai script %script%~ END
      END
  END
END

////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION genai
STR_VAR arguments="all" filename=""
BEGIN
           LPF CRE_read_class RET class=value END
           LPF CRE_read_kit RET kit=value END
           LPF CRE_read_level RET level=value END
           SET identified=0
           // parse input
           PATCH_FOR_EACH argtype IN all kit hla prof script conditional fix_thac0 BEGIN
              PATCH_IF (INDEX (CASE_INSENSITIVE ~%argtype%~ ~%arguments%~)>=0) BEGIN
                 SET EVALUATE_BUFFER ~install_%argtype%~=1
              END ELSE BEGIN
                 SET EVALUATE_BUFFER ~install_%argtype%~=0
              END
           END
           // THAC0 adjustments
           PATCH_IF (install_fix_thac0=1) BEGIN
              LPF CRE_enforce_thac0 STR_VAR arguments=within_tolerance END
           END

           // script
           PATCH_IF (install_all=1 || install_script=1) BEGIN
                 LPF split_gp_scripts END
                 LPF locate_genai_script RET loc=loc wander=wander END
                 PATCH_IF loc>=0 BEGIN
                       LPF identify_weapon_preferences STR_VAR filename RET has_ranged=has_ranged skip_me=skip_me onhandprof=onhandprof offhandprof=offhandprof rangedprof=rangedprof damagetype=damagetype enchantment=enchantment style=style END
                       SET identified=1
                       LPF CRE_check_if_moron RET is_moron=value END
                       LPF assign_genai_script INT_VAR loc wander is_moron has_ranged enchantment STR_VAR damagetype filename END
                 END
           END
           // kit
           PATCH_IF ((install_all=1 || install_kit=1) && (identified=1 || install_conditional=0)) BEGIN
              LPF enforce_kit STR_VAR arguments=mine filename END
           END
           // profs
           PATCH_IF ((install_all=1 || install_prof=1) && (identified=1 || install_conditional=0)) BEGIN
              PATCH_IF identified=0 BEGIN
                       LPF identify_weapon_preferences STR_VAR filename RET has_ranged=has_ranged skip_me=skip_me onhandprof=onhandprof offhandprof=offhandprof rangedprof=rangedprof style=style END
              END
              PATCH_IF skip_me=0 BEGIN
                  LPF allocate_proficiencies INT_VAR onhandprof offhandprof rangedprof style level STR_VAR class kit END
              END
           END
           // hlas
           PATCH_IF ((install_all=1 || install_hla=1) && (identified=1 || install_conditional=0)) BEGIN
               LPF assign_hlas STR_VAR filename END
           END

END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////    split up GPMERC/GPARCHER/GPTHIEF so that the help script is separated
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION split_gp_scripts
BEGIN
   SPRINT gpscript ~~
   SET has_gp=0
   FOR (i=0x248;i<0x270;i+=8) BEGIN
      READ_ASCII i temp
      TO_LOWER temp
      PATCH_MATCH ~%temp%~ WITH
      gpmerc gparcher gpthief chalpc01 BEGIN
             SPRINT gpscript ~%temp%~
             SET has_gp=1
      END
      DEFAULT END
   END
   PATCH_IF has_gp=1 BEGIN
     PATCH_MATCH ~%gpscript%~ WITH
     gpmerc gparcher gpthief chalpc01 balmonk BEGIN
           LPF CRE_insert_script STR_VAR arguments=EVALUATE_BUFFER ~dw#gphlp above %gpscript%~ END
     END
     DEFAULT END
   END
END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////    Go through the script slots (hardcoded) looking for a combat script. If found, return loc=location (0-5) of
////    first script and delete all scripts. Also return wander=1 if script is wdasight or the like, and delete gpuse et al
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION locate_genai_script
RET loc wander combatscript
BEGIN
   PATCH_IF !VARIABLE_IS_SET combat_scripts_read BEGIN
      LAUNCH_PATCH_MACRO read_in_combat_scripts
   END
   SPRINT combatscript ~~
   SET loc= "-1"
   SET wander=0
   FOR (i=0;i<6;i+=1) BEGIN
      READ_ASCII 0x248+8*i script
      TO_LOWER script
      PATCH_IF VARIABLE_IS_SET $combat_script(EVALUATE_BUFFER ~%script%~) BEGIN
         PATCH_IF (loc="-1") BEGIN
           PATCH_MATCH ~%script%~ WITH gpuse useitem BEGIN END DEFAULT SET loc=i END
         END
         PUSH combatscript ~%script%~
         WRITE_ASCII 0x248+8*i ~~ (8)

      END
      PATCH_MATCH ~%script%~ WITH wdasight wdarsgt _dasight _wdarsgt BEGIN
         SET wander=1
      END
      DEFAULT END
   END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////    Go through carried weapons and record the proficiency type of the onhand, offhand and ranged weapon, or
////    zero if none is carried; set skip_me to 1 if a non-proficiency weapon is carried; set style to the preferred
////    weapon style; wipe the offhand slot if it's illegal; get the highest enchantment level and the melee damage type(s)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_PATCH_FUNCTION identify_weapon_preferences    // goes through all carried weapons. Determines if a melee or a ranged weapon is carried, the proficiencies of carried weapons,
        STR_VAR filename=""
        RET onhandprof
            offhandprof
            rangedprof
            style
            skip_me
            has_ranged
            damagetype
            enchantment
BEGIN
       SPRINT damagetype unknown
       SET enchantment=0
       PATCH_FOR_EACH var IN has_twohanded onhandprof offhandprof rangedprof has_ranged BEGIN
          SET EVALUATE_BUFFER ~%var%~ = 0
       END
       SET style=STAT_VALUE_PROFICIENCYSINGLEWEAPON
       SET skip_me=1
       SPRINT ~to_delete~ ~~
       // get the item assigned to each slot
       PATCH_FOR_EACH arguments IN weapon1 weapon2 weapon3 weapon4 BEGIN
          LPF CRE_read_item_in_slot STR_VAR arguments RET weaponfile=value END
          PATCH_IF ~%weaponfile%~ STRING_COMPARE_CASE ~~ BEGIN
                LPF identify_weapon STR_VAR weaponfile RET this_twohanded=twohanded type=type proftype=proftype damagetype_here=damagetype ench_here=enchantment END
                PATCH_IF !(proftype=0) BEGIN
                   SET skip_me=0
                END
                PATCH_IF type=1 BEGIN
                   SET onhandprof=proftype
                   SET has_twohanded= this_twohanded=1? 1 : has_twohanded
                   PATCH_IF this_twohanded=1 BEGIN
                      SET style=STAT_VALUE_PROFICIENCY2HANDED
                   END
                END
                PATCH_IF type=2 BEGIN
                   SET rangedprof=proftype
                   SET has_ranged=1
                   SET has_twohanded= this_twohanded=1? 1 : has_twohanded
                END
                SET enchantment = enchantment>ench_here? enchantment : ench_here
                PATCH_IF ~%damagetype_here%~ STRING_COMPARE none BEGIN
                  PATCH_IF ~%damagetype%~ STRING_EQUAL unknown BEGIN
                     SPRINT damagetype ~%damagetype_here%~
                  END ELSE
                  PATCH_IF ~%damagetype%~ STRING_COMPARE ~%damagetype_here%~ BEGIN
                     SPRINT damagetype mixed
                  END
                END
          END
       END
       LPF CRE_read_item_in_slot STR_VAR arguments=shield RET weaponfile=value END
       PATCH_IF ~%weaponfile%~ STRING_COMPARE_CASE ~~ BEGIN
                    LPF identify_weapon STR_VAR weaponfile RET type=type proftype=proftype ench_here=enchantment damagetype_here=damagetype END
                    PATCH_IF type=0 BEGIN
                       SET style=STAT_VALUE_PROFICIENCYSWORDANDSHIELD
                    END ELSE BEGIN
                       SET style=STAT_VALUE_PROFICIENCY2WEAPON
                       SET offhandprof=proftype
                    END
                    PATCH_IF has_twohanded=1  BEGIN
                       SPRINT ~to_delete~ ~%weaponfile%~
                    END
                    SET enchantment = enchantment>ench_here? enchantment : ench_here
                    PATCH_IF ~%damagetype_here%~ STRING_COMPARE none BEGIN
                        PATCH_IF ~%damagetype%~ STRING_EQUAL unknown BEGIN
                           SPRINT damagetype ~%damagetype_here%~
                        END ELSE
                        PATCH_IF ~%damagetype%~ STRING_COMPARE ~%damagetype_here%~ BEGIN
                                    SPRINT damagetype mixed
                        END
                    END
       END
       PATCH_FOR_EACH arguments IN quiver1 quiver2 quiver3 quiver4 BEGIN
              LPF CRE_read_item_in_slot STR_VAR arguments RET weaponfile=value END
              PATCH_IF ~%weaponfile%~ STRING_COMPARE_CASE ~~ BEGIN
                 LPF identify_ammo STR_VAR weaponfile RET ench_here=enchantment END
                 SET enchantment = enchantment>ench_here? enchantment : ench_here
              END
       END

       PATCH_IF (~%to_delete%~ STRING_COMPARE_CASE ~~) BEGIN
          LPF CRE_remove_items STR_VAR arguments=EVALUATE_BUFFER ~%to_delete%~ END
          LPF log_resource_name STR_VAR filename arguments=illegal_offhand END
       END

END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////    For this item, record its proficiency, whether it's ranged, whether it's two-handed
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_PATCH_FUNCTION identify_weapon // note that if called on a shield, it returns type 0
        STR_VAR weaponfile=""
        RET twohanded
            type
            proftype
            enchantment
            damagetype
BEGIN
     TO_UPPER weaponfile
     PATCH_IF !VARIABLE_IS_SET $genai_twohanded(EVALUATE_BUFFER ~%weaponfile%~) BEGIN
       SET type=0
       SET proftype=0
       SET twohanded=0
       INNER_ACTION BEGIN
         ACTION_IF FILE_EXISTS_IN_GAME ~%weaponfile%.itm~ BEGIN
          COPY_EXISTING ~%weaponfile%.itm~ ~override~
              LPF identify_weapon_patch RET twohanded=twohanded type=type proftype=proftype enchantment=enchantment damagetype=damagetype END
          BUT_ONLY
         END ELSE BEGIN
             LAF action_display_warning STR_VAR arguments=EVALUATE_BUFFER ~Tried to identify nonexistent weapon %weaponfile%.itm~ END
         END
       END
     END ELSE BEGIN
        SET type=$genai_type(~%weaponfile%~)
        SET proftype=$genai_proftype(~%weaponfile%~)
        SET twohanded=$genai_twohanded(~%weaponfile%~)
        SPRINT damagetype $genai_damagetype(~%weaponfile%~)
        SET enchantment=$genai_enchantment(~%weaponfile%~)
     END
END

DEFINE_PATCH_FUNCTION identify_weapon_patch
        RET twohanded
            type
            proftype
            enchantment
            damagetype
BEGIN
           SPRINT damagetype none
           SET twohanded=0
           SET type=0
           SET proftype=0
           SET enchantment=0
           LPF ITM_read_twohanded RET twohanded=value END
           LPF ITM_read_proficiency_code RET proftype=value END
           SPRINT entry_type ability
           SPRINT file_prefix ITM
           LAUNCH_PATCH_MACRO get_offset_array
           PHP_EACH offset_array AS int=>offset_base BEGIN
                  LPF ITM_read_ability_type STR_VAR offset_base RET ab_type=value END
                  PATCH_IF ab_type=1 && type=0 BEGIN
                     LPF ITM_read_enchantment RET enchantment=value END
                     SET type=1
                     LPF ITM_read_damage_type STR_VAR offset_base RET damage_code=value END
                     PATCH_MATCH damage_code WITH
                     1 BEGIN
                        SPRINT damagetype piercing
                     END
                     2 BEGIN
                        SPRINT damagetype crushing
                     END
                     DEFAULT
                        SPRINT damagetype slashing
                     END
                  END
                  PATCH_IF (ab_type=2 || ab_type=4) && type=0 BEGIN
                     SET type=2
                  END
           END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////    Get the enchantment level for ammo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION identify_ammo
       STR_VAR weaponfile=""
       RET enchantment
BEGIN
   INNER_ACTION BEGIN
     ACTION_IF FILE_EXISTS_IN_GAME ~%weaponfile%.itm~ BEGIN
      COPY_EXISTING ~%weaponfile%.itm~ ~override~
           LPF ITM_read_enchantment RET enchantment=value END
      BUT_ONLY
     END ELSE BEGIN
             LAF action_display_warning STR_VAR arguments=EVALUATE_BUFFER ~Tried to identify nonexistent ammo %weaponfile%.itm~ END
     END
   END
END


/////////////////////////////////////////////////////////////////////////////////////////////
///        Allocates a script
/////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_PATCH_FUNCTION assign_genai_script
          INT_VAR loc=0 wander=0 is_moron=0 has_ranged=0 level=0 enchantment=0
          STR_VAR filename="" damagetype="slashing"
BEGIN
          // work out class data
          LPF CRE_read_kit RET kit=value END
          LPF CRE_read_level RET level=value END
          // start with the base
          PATCH_IF has_ranged=1 BEGIN
             SPRINT scripttype r
          END ELSE BEGIN
             SPRINT scripttype m
          END
          // get the damage type
          PATCH_MATCH ~%damagetype%~ WITH
          slashing BEGIN
             SPRINT scriptdmg s
          END
          crushing BEGIN
             SPRINT scriptdmg c
          END
          piercing BEGIN
             SPRINT scriptdmg p
          END
          DEFAULT
             SPRINT scriptdmg m
          END
          // work out number
          PATCH_IF is_bg2=0 BEGIN
             SPRINT scriptnum 1
          END ELSE BEGIN
             PATCH_IF level>=18 BEGIN
                SPRINT scriptnum 3
             END ELSE BEGIN
                PATCH_IF is_bg1=0 BEGIN
                 SPRINT scriptnum 2
                END ELSE BEGIN
                 LPF is_bg1_char STR_VAR filename RET value=value END
                 PATCH_IF value BEGIN
                   SPRINT scriptnum 1
                 END ELSE BEGIN
                   SPRINT scriptnum 2
                 END
                END
             END
          END
          // work out code
          PATCH_MATCH ~%kit%~ WITH
          KENSAI BEGIN
               SPRINT scriptcode ke
          END
          BARBARIAN BEGIN
               SPRINT scriptcode ba
          END
          BERSERKER BEGIN
               SPRINT scriptcode be
          END
          ARCHER BEGIN
               SPRINT scriptcode ar
          END
          STALKER BEGIN
               SPRINT scriptcode th
          END
          ASSASIN BEGIN // spelling mistake in KIT.IDS
               SPRINT scriptcode as
          END
          SWASHBUCKLER BEGIN
               SPRINT scriptcode ge
          END
          DEFAULT
               LPF CRE_read_class RET class=value END
               PATCH_MATCH ~%class%~ WITH
               MONK BEGIN
                  SPRINT scriptcode mn
               END
               THIEF MAGE_THIEF FIGHTER_THIEF FIGHTER_MAGE_THIEF CLERIC_THIEF BEGIN
                  SPRINT scriptcode th
               END
               DEFAULT
                PATCH_IF is_moron=0 BEGIN
                  PATCH_IF wander=0 BEGIN
                      SPRINT scriptcode ge
                  END ELSE BEGIN
                      SPRINT scriptcode gw
                  END
                END ELSE BEGIN
                  PATCH_IF wander=0 BEGIN
                      SPRINT scriptcode mo
                  END ELSE BEGIN
                      SPRINT scriptcode mw
                  END
                END
               END
          END
          PATCH_IF scriptnum=1 BEGIN
               PATCH_IF ~%scripttype%~ STRING_EQUAL_CASE m BEGIN
                  SPRINT scripttype_bg1 mel
               END ELSE BEGIN
                  SPRINT scripttype_bg1 ran
               END
               SPRINT script ~dw1%scripttype_bg1%%scriptcode%~
          END ELSE BEGIN
               SPRINT script ~dw%scriptnum%%scripttype%%scriptdmg%%enchantment%%scriptcode%~
          END
          SPRINT scriptname ~%script%~

          // install the script
          WRITE_ASCIIE (0x248+0x8 * loc) ~%scriptname%~
          // if necessary, make the script
          INNER_ACTION BEGIN
             LAF build_genai_script STR_VAR script END
          END
END

//////////////////////////////////////////////////////////////////////////////////////////
///  Proficiency allocation
///
///  Here are the priorities:
///  (1) put one star into onhand, offhand, and ranged (if appropriate, in each case)
///  (2) if fighting two-handed, max out two-weapon
///  (3) if using a ranged weapon, max it out
///  (4) if using an on-hand weapon, max it out
///  (5) if using an off-hand weapon, max it out
///  (6) max out any fighting style other than two-handed
///
///////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION allocate_proficiencies
   INT_VAR onhandprof=0
           offhandprof=0
           rangedprof=0
           style=0
           level=0
   STR_VAR class=""
           kit=""
BEGIN
           SET rangedprofnum=0
           SET offhandprofnum=0
           SET onhandprofnum=0
           SET stylenum=0
           SET onhandprof = onhandprof=rangedprof? 0 :onhandprof         // allow for duplications (e.g. two swords, or battleaxe/throwing axe)
           SET offhandprof = offhandprof=rangedprof? 0 : offhandprof
           SET offhandprof = offhandprof=onhandprof? 0 : offhandprof
           LPF get_num_profs INT_VAR level STR_VAR class RET num_profs=num_profs END
           PATCH_FOR_EACH profname IN onhandprof offhandprof rangedprof style BEGIN
              SET proficiency=EVALUATE_BUFFER ~%profname%~
              LPF get_max_profs INT_VAR proficiency level STR_VAR class kit RET EVALUATE_BUFFER ~max_%profname%~=max END
           END

           WHILE num_profs>0 BEGIN
              // decrease proficiency counter
              SET num_profs=num_profs - 1
              PATCH_IF (rangedprof>0 & rangedprofnum=0) BEGIN   // get basically proficient in one's weapons
                    SET rangedprofnum=1
              END ELSE
              PATCH_IF (onhandprof>0 & onhandprofnum=0 & max_onhandprof>0) BEGIN
                    SET onhandprofnum=1
              END ELSE
              PATCH_IF (offhandprof>0 & offhandprofnum=0 & max_offhandprof>0) BEGIN
                    SET offhandprofnum=1
              END ELSE
              PATCH_IF (style=STAT_VALUE_PROFICIENCY2WEAPON & stylenum<max_style) BEGIN   // max out two-weapon fighting
                    SET stylenum=stylenum+1
              END ELSE
              PATCH_IF (rangedprof>0 & rangedprofnum<max_rangedprof) BEGIN // max out ranged weapon (if any)
                    SET rangedprofnum=rangedprofnum+1
              END ELSE
              PATCH_IF (onhandprof>0 & onhandprofnum<max_onhandprof) BEGIN // max out onhand weapon
                    SET onhandprofnum=onhandprofnum+1
              END ELSE
              PATCH_IF (offhandprof>0 & offhandprofnum<max_offhandprof) BEGIN // max out offhand weapon (if any)
                    SET offhandprofnum=offhandprofnum+1
              END ELSE
              PATCH_IF (style>0 & stylenum<max_style) BEGIN // max out style
                    SET stylenum=stylenum+1
              END ELSE BEGIN
                 SET num_profs=0 // terminate loop if there are no legal choices
              END
           END
           // actually do the allocations
           LPF CRE_wipe_proficiencies END
           PATCH_FOR_EACH profname IN onhandprof offhandprof rangedprof style BEGIN
              SET profcode=EVALUATE_BUFFER ~%profname%~
              PATCH_IF profcode>0 BEGIN
                 SET value=EVALUATE_BUFFER ~%profname%num~
                 PATCH_IF value>0 BEGIN
                    LPF CRE_quick_effect STR_VAR arguments=EVALUATE_BUFFER ~opcode=>233 parameter1=>%value% parameter2=>%profcode% target=>0~ END
                 END
              END
           END
END

///////////////////////////////////////////////////////////////////////////////////////////
///      Work out the number of proficiencies a given character has (NB: this gets dual-classed characters wrong)
///////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION get_num_profs
          INT_VAR level=0
          STR_VAR class=""
          RET num_profs
BEGIN     
          INNER_ACTION BEGIN
             LAUNCH_ACTION_MACRO read_in_proficiency_progression
          END
          TO_UPPER class
          PATCH_IF VARIABLE_IS_SET $PROFICIENCY_FIRST_LEVEL(EVALUATE_BUFFER ~%class%~) BEGIN
              SET base=$PROFICIENCY_FIRST_LEVEL(EVALUATE_BUFFER ~%class%~)
              SET rate=$PROFICIENCY_RATE(EVALUATE_BUFFER ~%class%~)
          END ELSE BEGIN
             SET base=3
             SET rate=4
          END
          SET num_profs=base+level/rate
END



///////////////////////////////////////////////////////////////////////////////////////////
///      Work out the maximum number of proficiencies in a given proficiency slot
///////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION get_max_profs
          INT_VAR proficiency=0
                  level=0
          STR_VAR class=""
                  kit=""
          RET max
BEGIN
          PATCH_IF proficiency=0 BEGIN
           SET max=0
          END ELSE BEGIN
           INNER_ACTION BEGIN
              LAUNCH_ACTION_MACRO read_in_proficiencies
           END
           TO_UPPER kit
           PATCH_IF VARIABLE_IS_SET $PROFICIENCY(EVALUATE_BUFFER ~%proficiency%~ EVALUATE_BUFFER ~%kit%~) BEGIN
              SET max=$PROFICIENCY(EVALUATE_BUFFER ~%proficiency%~ EVALUATE_BUFFER ~%kit%~)
           END ELSE BEGIN
              TO_UPPER class
              PATCH_IF VARIABLE_IS_SET $PROFICIENCY(EVALUATE_BUFFER ~%proficiency%~ EVALUATE_BUFFER ~%class%~) BEGIN
                 SET max=$PROFICIENCY(EVALUATE_BUFFER ~%proficiency%~ EVALUATE_BUFFER ~%class%~)
              END ELSE 
              PATCH_IF ~%class%~ STRING_EQUAL_CASE ~SKELETON~ BEGIN
                 SET max=1
              END ELSE BEGIN // monsters
                   PATCH_IF level<3 BEGIN
                      SET max=1
                   END ELSE
                   PATCH_IF level<8 BEGIN
                      SET max=3
                   END ELSE BEGIN
                      SET max=5
                   END
              END
           END
           PATCH_IF level=1 BEGIN
              SET max=max>2?2:max
           END
          END
END



///////////////////////////////////////////////////////////////////////////////////////////
///      Read in combat scripts (i.e. those we aim to replace)
///////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_MACRO read_in_combat_scripts BEGIN
    PATCH_IF !(VARIABLE_IS_SET ~combat_scripts_read~) BEGIN
       SET combat_scripts_read=1
       PATCH_FOR_EACH script IN
              carch20b thiefrg amsmug01 cassa20b cassa20c cthie20a cthie20b thief14t
              kuoarc20 magesly gpthief gparcher duewar01 ft12t
              bpwtrsgt bpgpmerc bpgparch bpcarc2b ATTACKPC cbarb20b cbers20b cfigh20a
              cfigh20b cfigh30b fight16a chalcy02 attackpc cdryad dreadwlf ghast
              kuowar20 ogre CKENS20B CKENS30B KENSAI gpmerc
              bpwtasgt bpcken2b bpcken3b bpcfig2a bpcfig2b bpcbar2b bpcber2b
              bpgpkens bpwtsigt bpwdasgt bpwdrsgt wtasight wtarsgt wdasight wdarsgt
              _tasight _wtarsgt _dasight _wdarsgt gpuse useitem gorcamb4 gorcamb5
              balmonk cmonk20b wardog _wardog wilddog _wilddog
       BEGIN
          TO_LOWER ~script~
          SPRINT $combat_script(EVALUATE_BUFFER ~%script%~) ~~
       END

    END
END

///////////////////////////////////////////////////////////////////////////////////////////
///      Read in item data (the thought is that doing this once and for all may save time)
///////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_MACRO read_in_genai_item_data BEGIN
   ACTION_IF !(VARIABLE_IS_SET genai_items_read) BEGIN
       OUTER_SET genai_items_read=1
       PRINT ~Reading in initial data about weapons~
       SILENT
       COPY_EXISTING_REGEXP GLOB ~%tutu_var%.*\.itm~ ~override~
             SPRINT filename ~%SOURCE_RES%~
             LPF identify_weapon_patch RET twohanded=twohanded type=type proftype=proftype enchantment=enchantment damagetype=damagetype END
       BUT_ONLY
       OUTER_INNER_PATCH ~~ BEGIN TO_UPPER filename END
       OUTER_SET $genai_twohanded(EVALUATE_BUFFER ~%filename%~)=twohanded
       OUTER_SET $genai_type(EVALUATE_BUFFER ~%filename%~)=type
       OUTER_SET $genai_proftype(EVALUATE_BUFFER ~%filename%~)=proftype
       OUTER_SET $genai_enchantment(EVALUATE_BUFFER ~%filename%~)=enchantment
       OUTER_SPRINT $genai_damagetype(EVALUATE_BUFFER ~%filename%~) ~%damagetype%~
   END
END

    